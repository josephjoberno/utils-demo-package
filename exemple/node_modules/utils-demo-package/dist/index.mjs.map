{"version":3,"sources":["../src/index.ts"],"sourcesContent":["\nexport const utils    = {\n  // Vérifie si une valeur est vide (chaîne vide, tableau vide, objet vide, null ou undefined)\n  isEmpty(value: unknown): boolean {\n    if (value === null || value === undefined) return true;\n    if (typeof value === \"string\" || Array.isArray(value))\n      return value.length === 0;\n    if (typeof value === \"object\") return Object.keys(value).length === 0;\n    return false;\n  },\n\n  // Trouve un élément dans un tableau basé sur un prédicat\n  find<T>(array: T[], predicate: (item: T) => boolean): T | undefined {\n    return array.find(predicate);\n  },\n\n  // Trouve un élément dans un tableau par son ID\n  findById<T extends { id: string | number }>(\n    array: T[],\n    id: string | number\n  ): T | undefined {\n    return array.find((item) => item.id === id);\n  },\n\n  // Groupe les éléments d'un tableau par une clé spécifique\n  groupBy<T>(array: T[], key: keyof T): Record<string, T[]> {\n    return array.reduce((result, currentItem) => {\n      const groupKey = String(currentItem[key]);\n  \n      if (result[groupKey] === undefined) {\n        result[groupKey] = [];\n      }\n  \n      result[groupKey].push(currentItem);\n      return result;\n    }, {} as Record<string, T[]>);\n  },  \n  // Retire les doublons d'un tableau\n  removeDuplicates<T>(array: T[]): T[] {\n    return Array.from(new Set(array));\n  },\n\n  // Retire un élément d'un tableau par son index\n  removeItem<T>(array: T[], item: T): T[] {\n    const index = array.indexOf(item);\n    if (index > -1) {\n      array.splice(index, 1);\n    }\n    return array;\n  },\n\n  // Retire un élément d'un tableau par son ID\n  removeItemById<T extends { id: string | number }>(\n    array: T[],\n    id: string | number\n  ): T[] {\n    return array.filter((item) => item.id !== id);\n  },\n\n  // Trie un tableau d'objets par une propriété spécifique\n  sortBy<T>(array: T[], key: keyof T): T[] {\n    return [...array].sort((a, b) => {\n      if (a[key] < b[key]) return -1;\n      if (a[key] > b[key]) return 1;\n      return 0;\n    });\n  },\n\n  // Tri un tableau d'objets par une propriété spécifique dans l'ordre inverse\n  sortByDesc<T>(array: T[], key: keyof T): T[] {\n    return [...array].sort((a, b) => {\n      if (a[key] < b[key]) return 1;\n      if (a[key] > b[key]) return -1;\n      return 0;\n    });\n  },\n\n  // Crée un délai d'attente (promesse)\n  delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  },\n};\n"],"mappings":"AACO,IAAMA,EAAW,CAEtB,QAAQC,EAAyB,CAC/B,OAAIA,GAAU,KAAoC,GAC9C,OAAOA,GAAU,UAAY,MAAM,QAAQA,CAAK,EAC3CA,EAAM,SAAW,EACtB,OAAOA,GAAU,SAAiB,OAAO,KAAKA,CAAK,EAAE,SAAW,EAC7D,EACT,EAGA,KAAQC,EAAYC,EAAgD,CAClE,OAAOD,EAAM,KAAKC,CAAS,CAC7B,EAGA,SACED,EACAE,EACe,CACf,OAAOF,EAAM,KAAMG,GAASA,EAAK,KAAOD,CAAE,CAC5C,EAGA,QAAWF,EAAYI,EAAmC,CACxD,OAAOJ,EAAM,OAAO,CAACK,EAAQC,IAAgB,CAC3C,IAAMC,EAAW,OAAOD,EAAYF,CAAG,CAAC,EAExC,OAAIC,EAAOE,CAAQ,IAAM,SACvBF,EAAOE,CAAQ,EAAI,CAAC,GAGtBF,EAAOE,CAAQ,EAAE,KAAKD,CAAW,EAC1BD,CACT,EAAG,CAAC,CAAwB,CAC9B,EAEA,iBAAoBL,EAAiB,CACnC,OAAO,MAAM,KAAK,IAAI,IAAIA,CAAK,CAAC,CAClC,EAGA,WAAcA,EAAYG,EAAc,CACtC,IAAMK,EAAQR,EAAM,QAAQG,CAAI,EAChC,OAAIK,EAAQ,IACVR,EAAM,OAAOQ,EAAO,CAAC,EAEhBR,CACT,EAGA,eACEA,EACAE,EACK,CACL,OAAOF,EAAM,OAAQG,GAASA,EAAK,KAAOD,CAAE,CAC9C,EAGA,OAAUF,EAAYI,EAAmB,CACvC,MAAO,CAAC,GAAGJ,CAAK,EAAE,KAAK,CAACS,EAAGC,IACrBD,EAAEL,CAAG,EAAIM,EAAEN,CAAG,EAAU,GACxBK,EAAEL,CAAG,EAAIM,EAAEN,CAAG,EAAU,EACrB,CACR,CACH,EAGA,WAAcJ,EAAYI,EAAmB,CAC3C,MAAO,CAAC,GAAGJ,CAAK,EAAE,KAAK,CAACS,EAAGC,IACrBD,EAAEL,CAAG,EAAIM,EAAEN,CAAG,EAAU,EACxBK,EAAEL,CAAG,EAAIM,EAAEN,CAAG,EAAU,GACrB,CACR,CACH,EAGA,MAAMO,EAA2B,CAC/B,OAAO,IAAI,QAASC,GAAY,WAAWA,EAASD,CAAE,CAAC,CACzD,CACF","names":["utils","value","array","predicate","id","item","key","result","currentItem","groupKey","index","a","b","ms","resolve"]}